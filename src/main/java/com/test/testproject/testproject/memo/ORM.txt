ORM?
    Object Relational Mapping
    어플리케이션의 객체와 관계형 데이터베이스의 데이터를 자동으로 매핑해주는 것을 의미
       -java의 데이터 클래스와 관계형 데이터베이스의 테이블을 매핑
    객체지향 프로그래밍과 관계형 데이터베이스의 차이로 발생하는 제약사항을 해결해주는 역할을 수행
    대표적으로 JPA, Hibernate 등이 있음

    장점:
        SQL 쿼리가 아닌 직관적인 코드로 데이터 조작
        재사용 및 유지보수가 편리
        DBMS에 대한 종속성이 줄어듬


JPA
    - Java Persistance API의 줄임말이며, ORM과 관련된 인터페이스의 모음 (자바 어플리케이션에서 관계형 데이터베이스를 사용하는 방식을 정의한 인터페이스)
    - Java 진영에서 표준 ORM으로 채택
    - ORM이 큰 개념이라고 하면 JPA는 더 구체화 시킨 스팩 포함
    - ORM에 대한 자바 API 규격이며 Hibernate, OpenJPA등이 JPA를 구현한 구현체 이다 (ORM을 사용하기 위한 인터페이스를 모아둔 것)
    --> 결국 인터페이스이기 때문에 JPA를 사용하기 위해서 JPA를 구현한 Hibernate, EclipseLink, DataNucleus 같은 ORM 프레임워크를 사용해야함


Hibernate
    JPA를 사용하기 위해서 JPA를 구현한 ORM Framework 중 하나 (EclipseLink, DataNucleus, Hibernate..)
    JPA의 실제 구현체 중 하나이며, 현재 JPA 구현체 중 가장 많이 사용됨

    yml 설정 예:

        jpa:
          hibernate:
            ddl-auto: update
          properties:
            hibernate:
              format_sql: true # 실제로 실행되는 sql을 포맷팅해서 알아보기 쉽게 출력
              show_sql: true # sql 쿼리 보여줌
              naming:
                physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
                 --> 카멜 표기법으로 된 이름을 언더바를 붙여서 생성 (ex) userName -> user_name

       # ddl auto - type:
       1. create : 어플리케이션 실행시 테이블 모두 제거하고 다시 생성
       2. create-drop : 어플리케이션 실행 시 테이블 모두 제거후 다시 생성, 어플리케이션 종료 시점에 테이블 모두 제거
       3. update : 어플리케이션 실행 시 변경점만 반영
       4. validate : 현재 테이블 정보가 entity에 정의된 내용과 동일한지 체크, 다를 경우 경고 출력 후 어플리케이션 실행 X
       5. none: 자동 생성 X

Spring Data JPA
    Spring Framework에서 JPA를 편리하게 사용할 수 있게 지원하는 라이브러리
        -CRUD 처리용 인터페이스 제공
        -Repository 개발시 인터페이스만 작성하면 구현 객체를 동적으로 생성해서 주입
        -데이터 접근 계층 개발시 인터페이스만 작성해도 됨
    Hibernate에서 자주 사용되는 기능을 조금 더 쉽게 사용할 수 있게 구현


